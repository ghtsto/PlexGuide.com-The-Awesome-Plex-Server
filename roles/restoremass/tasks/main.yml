#!/bin/bash
#
# [Ansible Role]
#
# GitHub:   https://github.com/Admin9705/PlexGuide.com-The-Awesome-Plex-Server
# Author:   Admin9705 & Deiteq & FlickerRate
# URL:      https://plexguide.com
#
# PlexGuide Copyright (C) 2018 PlexGuide.com
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
---
- name: "Establishing Variable"
  shell: "awk '{print $1}' /tmp/program_var"
  register: program_var

- name: "Recovery ID"
  shell: "cat /var/plexguide/restore.id"
  register: recovery

- debug: msg="Temp Message - For {{program_var.stdout}} - Recover Server ID {{recovery.stdout}}"

- name: Does Backup Data Exist on Grive - {{program_var.stdout}}
  stat:
    path: /mnt/gdrive/plexguide/backup/{{recovery.stdout}}/{{program_var.stdout}}.tar
  register: programgdrive

- name: Stopping Docker Container - {{program_var.stdout}}
  docker_container:
    name: "{{program_var.stdout}}"
    state: stopped
  ignore_errors: True
  when: programgdrive.stat.exists == True

- name: "Checking for an OLDER version of {{program_var.stdout}} in TMP"
  stat:
    path: /tmp/{{program_var.stdout}}
  register: programtmp

- name: "Remove Old {{program_var.stdout}} from TMP"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/{{program_var.stdout}}.tar
  when: programtmp.stat.exists == True

- name: Checking for an APPDATA {{program_var.stdout}}
  stat:
    path: /opt/appdata"{{program_var.stdout}}
  register: programappdata
 
- debug: msg="Time Length can be Long or Short! Please Wait!"

- name: "Downloading from Google Drive - {{program_var.stdout}}"
  synchronize:
    src: /mnt/gdrive/plexguide/backup/{{recovery.stdout}}/{{program_var.stdout}}.tar
    dest: /tmp
  when: programgdrive.stat.exists == True

############ Restore Folder Check
- name: Restore Folder Check
  stat:
    path: /opt/appdata/{{program_var.stdout}}
  register: restore
  when: programgdrive.stat.exists == True

- name: Create Restore Folder
  file: "path={{item}} state=directory mode=0775 owner=1000 group=1000"
  with_items:
    - /opt/appdata/{{program_var.stdout}}
  ignore_errors: yes

## https://askubuntu.com/questions/553158/compressing-a-folder-tar-without-its-containing-directory-in-the-folder-name
#- name: "Restoring Downloaded Program from /tmp - {{program_var.stdout}}"
  #shell: "tar -xf '/tmp/{{program_var.stdout}}.tar' -C /opt/appdata/{{program_var.stdout}} ."
  #when: programgdrive.stat.exists == True

- name: Unzip Folders
  unarchive:
    src: /tmp/{{program_var.stdout}}.tar
    dest: /opt/appdata/{{program_var.stdout}}
    keep_newer: no
    owner: 1000
    group: 1000
    mode: 0775
  when: programgdrive.stat.exists == True

- name: Restart Docker Container - {{program_var.stdout}}
  docker_container:
    name: "{{program_var.stdout}}"
    state: started
  ignore_errors: True
  when: programgdrive.stat.exists == True

- name: Remove Leftover Tar from /tmp
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/{{program_var.stdout}}.tar

- debug: msg="Program is now RESTORED from your Google Drive - {{program_var.stdout}}"
  when: programgdrive.stat.exists == True

- debug: msg="Program is not restored - A BACKUP Does Not Exist on GDrive {{program_var.stdout}}"
  when: programgdrive.stat.exists == False
