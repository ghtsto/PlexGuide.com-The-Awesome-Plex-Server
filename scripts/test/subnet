#!/bin/bash

### Special thanks goes to https://github.com/kspillane for figuring this out!


# an accurate way to calculate the local network
# Use ifconfig to grab the subnet mask of locip
# Then AND it with locip to get the correct network
# Should work regardless of IP or subnet mask
# Should work with VLSM and CIDR
# Grab the subnet mask from ifconfig
locip=`hostname -I | awk '{print $1}'`
subnet_mask=$(ifconfig | grep $locip | awk -F ':' {'print $4'})
# Use bitwise & with ip and mask to calculate network address
IFSold=$IFS
IFS=. read -r i1 i2 i3 i4 <<< $locip
IFS=. read -r m1 m2 m3 m4 <<< $subnet_mask
IFS=$IFSold
lannet=$(printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))")



# Converts subnet mask into CIDR notation
# thanks to https://stackoverflow.com/questions/20762575/explanation-of-convertor-of-cidr-to-netmask-in-linux-shell-netmask2cdir-and-cdir
# because I kept messing it up.
#
# Define the function first, takes subnet as positional parameters
function mask2cdr()
{
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   cidr_bits=$(( $2 + (${#x}/4) ))
}
mask2cdr $subnet_mask # Call the function to convert to CIDR
lannet=$(echo "$lannet/$cidr_bits") # Combine lannet and cidr


#echo "CIDR_ADDRESS=$lannet" >> /opt/appdata/plexguide/.env
echo "  subnet: $lannet" >> /opt/appdata/plexguide/var-vpn.yml
